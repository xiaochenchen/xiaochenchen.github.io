<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sudoku | lightsaber]]></title>
  <link href="http://xiaochenchen.github.io/blog/categories/sudoku/atom.xml" rel="self"/>
  <link href="http://xiaochenchen.github.io/"/>
  <updated>2014-05-03T12:35:37-04:00</updated>
  <id>http://xiaochenchen.github.io/</id>
  <author>
    <name><![CDATA[lightsaber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[leetcode] Sudoku Solver]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/31/leetcode-sudoku-solver/"/>
    <updated>2014-03-31T23:39:16-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/31/leetcode-sudoku-solver</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Backtracking if an invalid decision is made for a cell. Recursive. There is also an utility function <code>findUnsolvedPosition</code> which returns an <code>int[]</code>: the coordinates of the first unresolved cell.
``` java Sudoku Solver <a href="http://oj.leetcode.com/problems/sudoku-solver/">http://oj.leetcode.com/problems/sudoku-solver/</a> Leetcode Link
/<em>*
 * Write a program to solve a Sudoku puzzle by filling the empty cells.
 * Empty cells are indicated by the character &lsquo;.&rsquo;.
 * You may assume that there will be only one unique solution.
 *
 * Created with IntelliJ IDEA.
 * User: lightsaber
 * Date: 2/13/14
 * Time: 7:08 PM
 </em>/
public class SudokuSolver
{</p>

<pre><code>private final int BOARD_LEN = 9;

public void solveSudoku(char[][] board) {
    solve(board);
}

private boolean solve(char[][] board)
{
    int[] unsolvedPosition = findUnsolvedPosition(board);

    // if there is no unsolved cell, return true
    if(Arrays.equals(new int[] {-1, -1}, unsolvedPosition)) return true;

    int r = unsolvedPosition[0], c = unsolvedPosition[1];

    for(int n = 1; n &lt;= BOARD_LEN; n++)
    {
        if(isSafe(board, r, c, Character.forDigit(n, 10)))
        {
            board[r][c] = Character.forDigit(n, 10);
            if(solve(board))
            {
                return true;
            }

            // failure, unset, try another number
            board[r][c] = '.';
        }
    }

    return false;
}

private int[] findUnsolvedPosition(char[][] board)
{
    int[] unsolvedPosition = new int[] {-1, -1};
    for(int i = 0; i &lt; BOARD_LEN; i++)
    {
        for(int j = 0; j &lt; BOARD_LEN; j++)
        {
            if(board[i][j] == '.')
            {
                unsolvedPosition[0] = i;
                unsolvedPosition[1] = j;
                return unsolvedPosition;
            }
        }
    }
    return unsolvedPosition;
}

private boolean isSafe(char[][] board, int r, int c, char num)
{
    // check row
    for(int j = 0; j &lt; BOARD_LEN; j++)
    {
        if(board[r][j] == num)
        {
            return false;
        }
    }

    // check column
    for(int i = 0; i &lt; BOARD_LEN; i++)
    {
        if(board[i][c] == num)
        {
            return false;
        }
    }

    // check 3X3 box
    int box_row = r / 3;
    int box_col = c / 3;
    for(int i = 3 * box_row; i &lt; 3 * (box_row + 1); i++)
    {
        for(int j = 3 * box_col; j &lt; 3 * (box_col + 1); j++)
        {
            if(board[i][j] == num)
            {
                return false;
            }
        }
    }

    return true;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Valid Sudoku]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/31/leetcode-valid-sudoku/"/>
    <updated>2014-03-31T23:18:21-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/31/leetcode-valid-sudoku</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Validate all rows, all columns and all 3X3 grids respectively.
``` java Valid Sudoku <a href="http://oj.leetcode.com/problems/valid-sudoku/">http://oj.leetcode.com/problems/valid-sudoku/</a> Leetcode Link
/<em>*
 * Determine if a Sudoku is valid, according to: Sudoku Puzzles &ndash; The Rules.
 *
 * The Sudoku board could be partially filled, where empty cells are filled with the character &lsquo;.&rsquo;.
 *
 * Note:
 * A valid Sudoku board (partially filled) is not necessarily solvable.
 * Only the filled cells need to be validated.
 *
 * Created by lightsaber on 3/31/14.
 </em>/
public class ValidSudoku
{</p>

<pre><code>public boolean isValidSudoku(char[][] board)
{
    boolean[] visited = new boolean[9];

    // check each row
    for(int i = 0; i &lt; board.length; ++i)
    {
        Arrays.fill(visited, false);
        for(int j = 0; j &lt; board[i].length; ++j)
        {
            if(board[i][j] != '.')
            {
                if(visited[board[i][j] - '1']) return false;
                else visited[board[i][j] - '1'] = true;
            }
        }
    }

    // check each column
    for(int j = 0; j &lt; board[0].length; ++j)
    {
        Arrays.fill(visited, false);
        for(int i = 0; i &lt; board.length; ++i)
        {
            if(board[i][j] != '.')
            {
                if(visited[board[i][j] - '1']) return false;
                else visited[board[i][j] - '1'] = true;
            }
        }
    }

    // check each 3 * 3 grid
    for(int m = 0; m &lt; 3; ++m)
    {
        for(int n = 0; n &lt; 3; ++n)
        {
            Arrays.fill(visited, false);
            for(int i = m * 3; i &lt; m * 3 + 3; ++i)
            {
                for(int j = n * 3; j &lt; n * 3 + 3; ++j)
                {
                    if(board[i][j] != '.')
                    {
                        if(visited[board[i][j] - '1']) return false;
                        else visited[board[i][j] - '1'] = true;
                    }
                }
            }
        }
    }

    return true;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
