<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: permutation | lightsaber]]></title>
  <link href="http://xiaochenchen.github.io/blog/categories/permutation/atom.xml" rel="self"/>
  <link href="http://xiaochenchen.github.io/"/>
  <updated>2014-05-03T12:38:44-04:00</updated>
  <id>http://xiaochenchen.github.io/</id>
  <author>
    <name><![CDATA[lightsaber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[leetcode] Permutations]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-permutations/"/>
    <updated>2014-03-30T23:07:46-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-permutations</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Classic recursion problem.
Use boolean array <code>visited[]</code> to track which element has been visited so far.
``` java Permutations <a href="http://oj.leetcode.com/problems/permutations/">http://oj.leetcode.com/problems/permutations/</a> Leetcode Link
/<em>*
 * Given a collection of numbers, return all possible permutations.
 *
 *  For example,
 *      [1,2,3] have the following permutations:
 *      [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
 *
 * Created by lightsaber on 3/30/14.
 </em>/
public class Permutations
{</p>

<pre><code>public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permute(int[] num)
{
    // final results
    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();

    // intermediate result used for recursion
    ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();

    // used to track which number has been visited
    boolean[] visited = new boolean[num.length];

    generate(num, results, result, visited);

    return results;
}

public void generate(int[] num, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results, ArrayList&lt;Integer&gt; result, boolean[] visited)
{
    if(result.size() == num.length)
    {
        results.add(new ArrayList&lt;Integer&gt;(result));
        return;
    }

    for(int i = 0; i &lt; num.length; ++i)
    {
        if(!visited[i])
        {
            result.add(num[i]);
            visited[i] = true;

            generate(num, results, result, visited);

            result.remove(result.size() - 1);
            visited[i] = false;
        }
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
