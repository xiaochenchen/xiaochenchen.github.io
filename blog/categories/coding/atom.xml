<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | lightsaber]]></title>
  <link href="http://xiaochenchen.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://xiaochenchen.github.io/"/>
  <updated>2014-03-30T15:58:19-04:00</updated>
  <id>http://xiaochenchen.github.io/</id>
  <author>
    <name><![CDATA[lightsaber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[leetcode] Combination Sum II]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum-ii/"/>
    <updated>2014-03-30T15:44:39-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum-ii</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>This problem (P2) is similar to <a href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum/">Combination Sum</a> (P1) yet quite different.</p>

<ol>
<li>P1 allows to use on element multiple times while P2 does not</li>
<li>P1 has unique elements and P2 allows duplicates</li>
</ol>


<p>Same recursion solution with the following difference:</p>

<ol>
<li>When making recursive calls, set the <code>startIndex</code> to i + 1 instead i</li>
<li>Discard duplicates after <code>startIndex</code> in the loop</li>
</ol>


<p>``` java Combination Sum II <a href="http://oj.leetcode.com/problems/combination-sum-ii/">http://oj.leetcode.com/problems/combination-sum-ii/</a> Leetcode Link
/<em>*
 * Given a collection of candidate numbers &copy; and a target number (T),
 * find all unique combinations in C where the candidate numbers sums to T.
 * Each number in C may only be used once in the combination.
 * Note:
 * All numbers (including target) will be positive integers.
 * Elements in a combination (a1, a2, &hellip; , ak) must be in non-descending order.
 * (ie, a1 &lt;= a2 &lt;= &hellip; &lt;= ak).
 * The solution set must not contain duplicate combinations.
 *
 * For example, given candidate set 10,1,2,7,6,1,5 and target 8,
 * A solution set is:
 * [1, 7]
 * [1, 2, 5]
 * [2, 6]
 * [1, 1, 6]
 *
 * Created by lightsaber on 3/30/14.
 </em>/
public class CombinationSumII
{</p>

<pre><code>public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinationSum2(int[] num, int target)
{
    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
    ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();

    // sort input array so that the results combination will be in non-descending order
    Arrays.sort(num);

    generate(num, results, result, 0, 0, target);

    return results;
}

public void generate(int[] num, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results,
                     ArrayList&lt;Integer&gt; result, int startIndex, int currSum, int target)
{
    if(currSum == target)
    {
        // found a valid combination
        results.add(new ArrayList&lt;Integer&gt;(result));
        return;
    }
    else if(currSum &gt; target)
    {
        return;
    }

    for(int i = startIndex; i &lt; num.length; ++i)
    {
        // in this loop, we are taking one of the numbers after startIndex (inclusive)
        // skip duplicates after startIndex
        if(i &gt; startIndex &amp;&amp; num[i] == num[i - 1])
        {
            continue;
        }

        result.add(num[i]);
        generate(num, results, result, i + 1, currSum + num[i], target);
        result.remove(result.size() - 1);
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Combination Sum]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum/"/>
    <updated>2014-03-30T14:51:10-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Recursive solution.
``` java Combination Sum <a href="http://oj.leetcode.com/problems/combination-sum">http://oj.leetcode.com/problems/combination-sum</a> Leetcode Link
/<em>*
 * Given a set of candidate numbers &copy; and a target number (T),
 * find all unique combinations in C where the candidate numbers sums to T.
 * The same repeated number may be chosen from C unlimited number of times.
 *
 * Note:
 * All numbers (including target) will be positive integers.
 * Elements in a combination (a1, a2, &hellip; , ak)
 * must be in non-descending order. (ie, a1 &lt;= a2 &lt;= &hellip; &lt;= ak).
 * The solution set must not contain duplicate combinations.
 *
 * For example, given candidate set 2,3,6,7 and target 7,
 *
 * A solution set is:
 * [7]
 * [2, 2, 3]
 *
 * Created by lightsaber on 3/29/14.
 </em>/
public class CombinationSum
{</p>

<pre><code>public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target)
{
    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
    ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();

    Arrays.sort(candidates);

    generate(candidates, results, result, 0, 0, target);

    return results;
}

public void generate(int[] candidates, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results,
                     ArrayList&lt;Integer&gt; result, int startIndex, int currSum, int target)
{
    // found a valid combination
    if(currSum == target)
    {
        results.add(new ArrayList&lt;Integer&gt;(result));
        return;
    }
    // currSum is greater than target, stop right here
    else if(currSum &gt; target)
    {
        return;
    }

    for(int i = startIndex; i &lt; candidates.length; ++i)
    {
        result.add(candidates[i]);
        generate(candidates, results, result, i, currSum + candidates[i], target);
        result.remove(result.size() - 1);
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Generate Parentheses]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-generate-parentheses/"/>
    <updated>2014-03-30T14:46:33-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-generate-parentheses</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Recursion, keep track of leftCount and rightCount. Decide to only append left or both.
``` java Generate Parentheses <a href="http://oj.leetcode.com/problems/generate-parentheses/">http://oj.leetcode.com/problems/generate-parentheses/</a> Leetcode Link
/<em>*
 *
 * Given n pairs of parentheses,
 * write a function to generate all combinations of well-formed parentheses.
 *
 *      For example, given n = 3, a solution set is:
 *      &ldquo;((()))&rdquo;, &ldquo;(()())&rdquo;, &ldquo;(())()&rdquo;, &ldquo;()(())&rdquo;, &ldquo;()()()&rdquo;
 *
 * Created by lightsaber on 3/29/14.
 </em>/
public class GenerateParentheses
{</p>

<pre><code>public ArrayList&lt;String&gt; generateParentheses(int n)
{
    ArrayList&lt;String&gt; results = new ArrayList&lt;String&gt;();
    StringBuilder sb = new StringBuilder();
    generate(results, sb, n, n);
    return results;
}

public void generate(ArrayList&lt;String&gt; results, StringBuilder result, int lc, int rc)
{
    // end of one combination, add to the result set and return
    if(lc == 0 &amp;&amp; rc == 0)
    {
        results.add(result.toString());
        return;
    }

    if(lc &gt; 0)
    {
        result.append("(");
        generate(results, result, lc - 1, rc);
        result.deleteCharAt(result.length() - 1);
    }

    if(lc &lt; rc)
    {
        result.append(")");
        generate(results, result, lc, rc - 1);
        result.deleteCharAt(result.length() - 1);
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Longest Consecutive Sequence]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-longest-consecutive-sequence/"/>
    <updated>2014-03-30T14:23:31-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-longest-consecutive-sequence</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Store all elements in an HashSet H.
Start scaning the array, for each element i in the array, if i is in H, check whether i-1 is in H, if yes, remove i-1 from H, continue to check i &ndash; 2 and not found in H. Do the same thing from i to its right. Keep track of current max length. Return max length at the end.
``` java Longest Consecutive Sequence <a href="http://oj.leetcode.com/problems/longest-consecutive-sequence/">http://oj.leetcode.com/problems/longest-consecutive-sequence/</a> Leetcode Link
/<em>*
 *
 * Given an unsorted array of integers,
 * find the length of the longest consecutive elements sequence.
 *
 * For example,
 * Given [100, 4, 200, 1, 3, 2],
 * The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.
 * Your algorithm should run in O(n) complexity.
 *
 * Created by lightsaber on 3/27/14.
 </em>/
public class LongestConsecutiveSequence
{</p>

<pre><code>public int longestConsecutive(int[] num)
{
    Set&lt;Integer&gt; numbers = new HashSet&lt;Integer&gt;();
    for(int i : num)
    {
        numbers.add(i);
    }

    int longest = 0;
    for(int i : num)
    {
        if(numbers.contains(i))
        {
            int left = i, right = i;

            while(numbers.contains(left - 1))
            {
                numbers.remove(--left);
            }

            while(numbers.contains(right + 1))
            {
                numbers.remove(++right);
            }

            if(right - left + 1 &gt; longest)
            {
                longest = right - left + 1;
            }
        }
    }

    return longest;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Implement strStr()]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/27/leetcode-implement-strstr/"/>
    <updated>2014-03-27T22:47:45-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/27/leetcode-implement-strstr</id>
    <content type="html"><![CDATA[<h3>Algorithm</h3>

<p>brute force, stop matching when the remaining string in source is shorter than target
There is KMP algorithm, if you are interested. Not implementing here.
``` java Implement strStr() <a href="http://oj.leetcode.com/problems/implement-strstr/">http://oj.leetcode.com/problems/implement-strstr/</a> Leetcode Link
/<em>*
 *
 * Implement strStr().
 * Returns a pointer to the first occurrence of needle in haystack,
 * or null if needle is not part of haystack.
 *
 * Created by lightsaber on 3/27/14.
 </em>/
public class StrStr
{</p>

<pre><code>public String strStr(String haystack, String needle) {
    for(int i = 0; i &lt;= haystack.length() - needle.length(); ++i)
    {
        if(haystack.substring(i, i + needle.length()).equals(needle))
        {
            return haystack.substring(i);
        }
    }

    return null;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
