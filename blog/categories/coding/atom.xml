<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | lightsaber]]></title>
  <link href="http://xiaochenchen.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://xiaochenchen.github.io/"/>
  <updated>2014-03-23T22:22:23-04:00</updated>
  <id>http://xiaochenchen.github.io/</id>
  <author>
    <name><![CDATA[lightsaber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[leetcode] Valid Parentheses]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/23/leetcode-valid-parentheses/"/>
    <updated>2014-03-23T22:19:46-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/23/leetcode-valid-parentheses</id>
    <content type="html"><![CDATA[<p>Scan through the string, if left parenthesis is encountered, push into stack, if right parenthesis is encountered, match with the top element from the stack.
``` java Valid Parentheses <a href="http://oj.leetcode.com/problems/valid-parentheses/">http://oj.leetcode.com/problems/valid-parentheses/</a> Leetcode Link
/<em>*
 * Valid Parentheses
 *
 * Given a string containing just the characters &lsquo;(&rsquo;, &lsquo;)&rsquo;, &lsquo;{&rsquo;, &lsquo;}&rsquo;, &lsquo;[&rsquo; and &lsquo;]&rsquo;,
 * determine if the input string is valid. The brackets must close in the correct order,
 * &ldquo;()&rdquo; and &ldquo;()[]{}&rdquo; are all valid but &ldquo;(]&rdquo; and &ldquo;([)]&rdquo; are not.
 *
 * Created by lightsaber on 3/23/14.
 </em>/
public class ValidParentheses
{</p>

<pre><code>public boolean isValid(String s) {
    Stack&lt;Character&gt; leftParentheses = new Stack&lt;Character&gt;();
    for(char c : s.toCharArray())
    {
        // if left parenthesis, push into stack, continue to next char
        if(c == '(' || c == '[' || c == '{')
        {
            leftParentheses.push(c);
            continue;
        }

        // if stack empty, return false
        if(leftParentheses.isEmpty())
        {
            return false;
        }

        // check if the top of stack matches with current char
        char topOfStack = leftParentheses.pop();
        if( !((c == ')' &amp;&amp; topOfStack == '(')
                    || (c == ']') &amp;&amp; topOfStack == '['
                    || (c == '}') &amp;&amp; topOfStack == '{') )
        {
            return false;
        }
    }

    // if nothing left in the stack, return true
    if(leftParentheses.isEmpty())
    {
        return true;
    }
    else
    {
        return false;
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Remove Nth Node From End of List]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/23/leetcode-remove-nth-node-from-end-of-list/"/>
    <updated>2014-03-23T16:28:30-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/23/leetcode-remove-nth-node-from-end-of-list</id>
    <content type="html"><![CDATA[<p>There is an assumption:
Given n will always be valid.</p>

<p>Also notice that the index start from 1 from the end of the list.</p>

<p>Two things to pay attention to during implementation:
(1) add a dummy head pointer to avoid special processing for the case when head is null
(2) keep track of the node (call it B) before the target node, check if B.next is null before removing the target node</p>

<p>``` java Remove Nth Node From End of List <a href="http://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/">http://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/</a> Leetcode Link
/<em>*
 * Given a linked list, remove the nth node from the end of list and return its head.
 * For example,
 *  Given linked list: 1->2->3->4->5, and n = 2.
 *  After removing the second node from the end, the linked list becomes 1->2->3->5.
 *
 * Solution:
 *  Start with a A pointer from the head, once A is pointing to Nth node
 *  introduce pointer start from head, move A and B together until A gets to the end
 *  And now remove the node after B.
 *
 </em>/
public class RemoveNthNodeFromEndOfList {</p>

<pre><code>// Definition for singly-linked list.
public class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
        next = null;
    }
}

public ListNode removeNthFromEnd(ListNode head, int n)
{
    // introduce dummy head to ignore the null list input case
    ListNode dummyHead = new ListNode(Integer.MIN_VALUE);
    dummyHead.next = head;

    // A pointer
    ListNode aNode = dummyHead;
    // index of the A pointer
    int aIndex = 0;

    // advance A pointer to N node away from head
    while(aIndex &lt; n &amp;&amp; aNode.next != null)
    {
        aNode = aNode.next;
        aIndex++;
    }

    // B pointer
    ListNode bNode = dummyHead;

    // advance A and B at the same time, until A gets the the end
    while(aNode.next != null)
    {
        aNode = aNode.next;
        bNode = bNode.next;
    }

    // remove the Node after B, which is Nth away from the end
    // only when bNode.next is not NULL
    if(bNode.next != null)
    {
        bNode.next = bNode.next.next;
    }

    return dummyHead.next;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Longest Common Prefix]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/23/leetcode-longest-common-prefix/"/>
    <updated>2014-03-23T15:36:43-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/23/leetcode-longest-common-prefix</id>
    <content type="html"><![CDATA[<p>``` java Longest Common Prefix <a href="http://oj.leetcode.com/problems/longest-common-prefix/">http://oj.leetcode.com/problems/longest-common-prefix/</a> Leetcode Link
/<em>*
 * Write a function to find the longest common prefix string amongst an array of strings.
 *
 * Solution:
 *  start from the first char in first string, check if it in all other strings, if not, return
 *
 </em>/
public class LongestCommonPrefix
{</p>

<pre><code>public String longestCommonPrefix(String[] strs)
{
    // if null input or empty input, return empty string
    if(strs == null || strs.length == 0)
    {
        return "";
    }

    StringBuilder result = new StringBuilder();

    for(int i = 0; i &lt; strs[0].length(); ++i)
    {
        for(int j = 1; j &lt; strs.length; ++j)
        {
            // if the current char in strs[0] doesn't exist in any following str
            if(strs[j].length() &lt;= i || strs[0].charAt(i) != strs[j].charAt(i))
            {
                // return current common prefix result
                return result.toString();
            }
        }
        // if the current char exists in all other strs, append it to common prefix
        result.append(strs[0].charAt(i));
    }

    // if all chars in strs[0] are prefix in other strs, return strs[0]
    return result.toString();
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
