<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | lightsaber]]></title>
  <link href="http://xiaochenchen.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://xiaochenchen.github.io/"/>
  <updated>2014-05-03T12:43:47-04:00</updated>
  <id>http://xiaochenchen.github.io/</id>
  <author>
    <name><![CDATA[lightsaber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[leetcode] Sudoku Solver]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/31/leetcode-sudoku-solver/"/>
    <updated>2014-03-31T23:39:16-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/31/leetcode-sudoku-solver</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Backtracking if an invalid decision is made for a cell. Recursive. There is also an utility function <code>findUnsolvedPosition</code> which returns an <code>int[]</code>: the coordinates of the first unresolved cell.
``` java Sudoku Solver <a href="http://oj.leetcode.com/problems/sudoku-solver/">http://oj.leetcode.com/problems/sudoku-solver/</a> Leetcode Link
/<em>*
 * Write a program to solve a Sudoku puzzle by filling the empty cells.
 * Empty cells are indicated by the character &lsquo;.&rsquo;.
 * You may assume that there will be only one unique solution.
 *
 * Created with IntelliJ IDEA.
 * User: lightsaber
 * Date: 2/13/14
 * Time: 7:08 PM
 </em>/
public class SudokuSolver
{</p>

<pre><code>private final int BOARD_LEN = 9;

public void solveSudoku(char[][] board) {
    solve(board);
}

private boolean solve(char[][] board)
{
    int[] unsolvedPosition = findUnsolvedPosition(board);

    // if there is no unsolved cell, return true
    if(Arrays.equals(new int[] {-1, -1}, unsolvedPosition)) return true;

    int r = unsolvedPosition[0], c = unsolvedPosition[1];

    for(int n = 1; n &lt;= BOARD_LEN; n++)
    {
        if(isSafe(board, r, c, Character.forDigit(n, 10)))
        {
            board[r][c] = Character.forDigit(n, 10);
            if(solve(board))
            {
                return true;
            }

            // failure, unset, try another number
            board[r][c] = '.';
        }
    }

    return false;
}

private int[] findUnsolvedPosition(char[][] board)
{
    int[] unsolvedPosition = new int[] {-1, -1};
    for(int i = 0; i &lt; BOARD_LEN; i++)
    {
        for(int j = 0; j &lt; BOARD_LEN; j++)
        {
            if(board[i][j] == '.')
            {
                unsolvedPosition[0] = i;
                unsolvedPosition[1] = j;
                return unsolvedPosition;
            }
        }
    }
    return unsolvedPosition;
}

private boolean isSafe(char[][] board, int r, int c, char num)
{
    // check row
    for(int j = 0; j &lt; BOARD_LEN; j++)
    {
        if(board[r][j] == num)
        {
            return false;
        }
    }

    // check column
    for(int i = 0; i &lt; BOARD_LEN; i++)
    {
        if(board[i][c] == num)
        {
            return false;
        }
    }

    // check 3X3 box
    int box_row = r / 3;
    int box_col = c / 3;
    for(int i = 3 * box_row; i &lt; 3 * (box_row + 1); i++)
    {
        for(int j = 3 * box_col; j &lt; 3 * (box_col + 1); j++)
        {
            if(board[i][j] == num)
            {
                return false;
            }
        }
    }

    return true;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Valid Sudoku]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/31/leetcode-valid-sudoku/"/>
    <updated>2014-03-31T23:18:21-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/31/leetcode-valid-sudoku</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Validate all rows, all columns and all 3X3 grids respectively.
``` java Valid Sudoku <a href="http://oj.leetcode.com/problems/valid-sudoku/">http://oj.leetcode.com/problems/valid-sudoku/</a> Leetcode Link
/<em>*
 * Determine if a Sudoku is valid, according to: Sudoku Puzzles &ndash; The Rules.
 *
 * The Sudoku board could be partially filled, where empty cells are filled with the character &lsquo;.&rsquo;.
 *
 * Note:
 * A valid Sudoku board (partially filled) is not necessarily solvable.
 * Only the filled cells need to be validated.
 *
 * Created by lightsaber on 3/31/14.
 </em>/
public class ValidSudoku
{</p>

<pre><code>public boolean isValidSudoku(char[][] board)
{
    boolean[] visited = new boolean[9];

    // check each row
    for(int i = 0; i &lt; board.length; ++i)
    {
        Arrays.fill(visited, false);
        for(int j = 0; j &lt; board[i].length; ++j)
        {
            if(board[i][j] != '.')
            {
                if(visited[board[i][j] - '1']) return false;
                else visited[board[i][j] - '1'] = true;
            }
        }
    }

    // check each column
    for(int j = 0; j &lt; board[0].length; ++j)
    {
        Arrays.fill(visited, false);
        for(int i = 0; i &lt; board.length; ++i)
        {
            if(board[i][j] != '.')
            {
                if(visited[board[i][j] - '1']) return false;
                else visited[board[i][j] - '1'] = true;
            }
        }
    }

    // check each 3 * 3 grid
    for(int m = 0; m &lt; 3; ++m)
    {
        for(int n = 0; n &lt; 3; ++n)
        {
            Arrays.fill(visited, false);
            for(int i = m * 3; i &lt; m * 3 + 3; ++i)
            {
                for(int j = n * 3; j &lt; n * 3 + 3; ++j)
                {
                    if(board[i][j] != '.')
                    {
                        if(visited[board[i][j] - '1']) return false;
                        else visited[board[i][j] - '1'] = true;
                    }
                }
            }
        }
    }

    return true;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Permutations]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-permutations/"/>
    <updated>2014-03-30T23:07:46-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-permutations</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Classic recursion problem.
Use boolean array <code>visited[]</code> to track which element has been visited so far.
``` java Permutations <a href="http://oj.leetcode.com/problems/permutations/">http://oj.leetcode.com/problems/permutations/</a> Leetcode Link
/<em>*
 * Given a collection of numbers, return all possible permutations.
 *
 *  For example,
 *      [1,2,3] have the following permutations:
 *      [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
 *
 * Created by lightsaber on 3/30/14.
 </em>/
public class Permutations
{</p>

<pre><code>public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permute(int[] num)
{
    // final results
    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();

    // intermediate result used for recursion
    ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();

    // used to track which number has been visited
    boolean[] visited = new boolean[num.length];

    generate(num, results, result, visited);

    return results;
}

public void generate(int[] num, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results, ArrayList&lt;Integer&gt; result, boolean[] visited)
{
    if(result.size() == num.length)
    {
        results.add(new ArrayList&lt;Integer&gt;(result));
        return;
    }

    for(int i = 0; i &lt; num.length; ++i)
    {
        if(!visited[i])
        {
            result.add(num[i]);
            visited[i] = true;

            generate(num, results, result, visited);

            result.remove(result.size() - 1);
            visited[i] = false;
        }
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] First Missing Positive]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-first-missing-positive/"/>
    <updated>2014-03-30T22:17:24-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-first-missing-positive</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>For each positive element e in the array A, swap the element to index e &ndash; 1.
Then scan the array to find out the first missing positive.
``` java First Missing Positive <a href="http://oj.leetcode.com/problems/first-missing-positive/">http://oj.leetcode.com/problems/first-missing-positive/</a> Leetcode Link
/<em>*
 * Given an unsorted integer array,
 * find the first missing positive integer.
 *
 * For example,
 * Given [1,2,0] return 3,
 * and [3,4,-1,1] return 2.
 * Your algorithm should run in O(n) time and uses constant space.
 *
 * Created by lightsaber on 3/30/14.
 </em>/
public class FirstMissingPositive {</p>

<pre><code>public int firstMissingPositive(int[] A)
{
    int i = 0;
    while(i &lt; A.length)
    {
        if(A[i] &gt; 0 &amp;&amp; A[i] - 1 &lt; A.length
                &amp;&amp; A[i] - 1 != i &amp;&amp; A[i] != A[A[i] - 1])
            swap(A, i, A[i] - 1);
        else
            i++;
    }

    // if there is a missing positive found, return it
    for(i = 0; i &lt; A.length; ++i)
    {
        if(A[i] != i + 1)
        {
             return i + 1;
        }
    }

    // there is no missing positive so far, so next one will be
    return A.length + 1;
}

public void swap(int[] A, int i, int j)
{
    if(A == null || i == j || i &lt; 0 || j &lt; 0
            || i &gt;= A.length || j &gt;= A.length)
    {
        return;
    }

    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Combination Sum II]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum-ii/"/>
    <updated>2014-03-30T15:44:39-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum-ii</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>This problem (P2) is similar to <a href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-combination-sum/">Combination Sum</a> (P1) yet quite different.</p>

<ol>
<li>P1 allows to use on element multiple times while P2 does not</li>
<li>P1 has unique elements and P2 allows duplicates</li>
</ol>


<p>Same recursion solution with the following difference:</p>

<ol>
<li>When making recursive calls, set the <code>startIndex</code> to i + 1 instead i</li>
<li>Discard duplicates after <code>startIndex</code> in the loop</li>
</ol>


<p>``` java Combination Sum II <a href="http://oj.leetcode.com/problems/combination-sum-ii/">http://oj.leetcode.com/problems/combination-sum-ii/</a> Leetcode Link
/<em>*
 * Given a collection of candidate numbers &copy; and a target number (T),
 * find all unique combinations in C where the candidate numbers sums to T.
 * Each number in C may only be used once in the combination.
 * Note:
 * All numbers (including target) will be positive integers.
 * Elements in a combination (a1, a2, &hellip; , ak) must be in non-descending order.
 * (ie, a1 &lt;= a2 &lt;= &hellip; &lt;= ak).
 * The solution set must not contain duplicate combinations.
 *
 * For example, given candidate set 10,1,2,7,6,1,5 and target 8,
 * A solution set is:
 * [1, 7]
 * [1, 2, 5]
 * [2, 6]
 * [1, 1, 6]
 *
 * Created by lightsaber on 3/30/14.
 </em>/
public class CombinationSumII
{</p>

<pre><code>public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinationSum2(int[] num, int target)
{
    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
    ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();

    // sort input array so that the results combination will be in non-descending order
    Arrays.sort(num);

    generate(num, results, result, 0, 0, target);

    return results;
}

public void generate(int[] num, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results,
                     ArrayList&lt;Integer&gt; result, int startIndex, int currSum, int target)
{
    if(currSum == target)
    {
        // found a valid combination
        results.add(new ArrayList&lt;Integer&gt;(result));
        return;
    }
    else if(currSum &gt; target)
    {
        return;
    }

    for(int i = startIndex; i &lt; num.length; ++i)
    {
        // in this loop, we are taking one of the numbers after startIndex (inclusive)
        // skip duplicates after startIndex
        if(i &gt; startIndex &amp;&amp; num[i] == num[i - 1])
        {
            continue;
        }

        result.add(num[i]);
        generate(num, results, result, i + 1, currSum + num[i], target);
        result.remove(result.size() - 1);
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
