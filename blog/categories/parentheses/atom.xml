<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: parentheses | lightsaber]]></title>
  <link href="http://xiaochenchen.github.io/blog/categories/parentheses/atom.xml" rel="self"/>
  <link href="http://xiaochenchen.github.io/"/>
  <updated>2014-03-30T15:11:42-04:00</updated>
  <id>http://xiaochenchen.github.io/</id>
  <author>
    <name><![CDATA[lightsaber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[leetcode] Generate Parentheses]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-generate-parentheses/"/>
    <updated>2014-03-30T14:46:33-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-generate-parentheses</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Recursion, keep track of leftCount and rightCount. Decide to only append left or both.
``` java Generate Parentheses <a href="http://oj.leetcode.com/problems/generate-parentheses/">http://oj.leetcode.com/problems/generate-parentheses/</a> Leetcode Link
/<em>*
 *
 * Given n pairs of parentheses,
 * write a function to generate all combinations of well-formed parentheses.
 *
 *      For example, given n = 3, a solution set is:
 *      &ldquo;((()))&rdquo;, &ldquo;(()())&rdquo;, &ldquo;(())()&rdquo;, &ldquo;()(())&rdquo;, &ldquo;()()()&rdquo;
 *
 * Created by lightsaber on 3/29/14.
 </em>/
public class GenerateParentheses
{</p>

<pre><code>public ArrayList&lt;String&gt; generateParentheses(int n)
{
    ArrayList&lt;String&gt; results = new ArrayList&lt;String&gt;();
    StringBuilder sb = new StringBuilder();
    generate(results, sb, n, n);
    return results;
}

public void generate(ArrayList&lt;String&gt; results, StringBuilder result, int lc, int rc)
{
    // end of one combination, add to the result set and return
    if(lc == 0 &amp;&amp; rc == 0)
    {
        results.add(result.toString());
        return;
    }

    if(lc &gt; 0)
    {
        result.append("(");
        generate(results, result, lc - 1, rc);
        result.deleteCharAt(result.length() - 1);
    }

    if(lc &lt; rc)
    {
        result.append(")");
        generate(results, result, lc, rc - 1);
        result.deleteCharAt(result.length() - 1);
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
