<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: array | lightsaber]]></title>
  <link href="http://xiaochenchen.github.io/blog/categories/array/atom.xml" rel="self"/>
  <link href="http://xiaochenchen.github.io/"/>
  <updated>2014-05-03T01:55:55-04:00</updated>
  <id>http://xiaochenchen.github.io/</id>
  <author>
    <name><![CDATA[lightsaber]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[leetcode] First Missing Positive]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-first-missing-positive/"/>
    <updated>2014-03-30T22:17:24-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-first-missing-positive</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>For each positive element e in the array A, swap the element to index e &ndash; 1.
Then scan the array to find out the first missing positive.
``` java First Missing Positive <a href="http://oj.leetcode.com/problems/first-missing-positive/">http://oj.leetcode.com/problems/first-missing-positive/</a> Leetcode Link
/<em>*
 * Given an unsorted integer array,
 * find the first missing positive integer.
 *
 * For example,
 * Given [1,2,0] return 3,
 * and [3,4,-1,1] return 2.
 * Your algorithm should run in O(n) time and uses constant space.
 *
 * Created by lightsaber on 3/30/14.
 </em>/
public class FirstMissingPositive {</p>

<pre><code>public int firstMissingPositive(int[] A)
{
    int i = 0;
    while(i &lt; A.length)
    {
        if(A[i] &gt; 0 &amp;&amp; A[i] - 1 &lt; A.length
                &amp;&amp; A[i] - 1 != i &amp;&amp; A[i] != A[A[i] - 1])
            swap(A, i, A[i] - 1);
        else
            i++;
    }

    // if there is a missing positive found, return it
    for(i = 0; i &lt; A.length; ++i)
    {
        if(A[i] != i + 1)
        {
             return i + 1;
        }
    }

    // there is no missing positive so far, so next one will be
    return A.length + 1;
}

public void swap(int[] A, int i, int j)
{
    if(A == null || i == j || i &lt; 0 || j &lt; 0
            || i &gt;= A.length || j &gt;= A.length)
    {
        return;
    }

    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[leetcode] Longest Consecutive Sequence]]></title>
    <link href="http://xiaochenchen.github.io/blog/2014/03/30/leetcode-longest-consecutive-sequence/"/>
    <updated>2014-03-30T14:23:31-04:00</updated>
    <id>http://xiaochenchen.github.io/blog/2014/03/30/leetcode-longest-consecutive-sequence</id>
    <content type="html"><![CDATA[<h3>Algorithm:</h3>

<p>Store all elements in an HashSet H.
Start scaning the array, for each element i in the array, if i is in H, check whether i-1 is in H, if yes, remove i-1 from H, continue to check i &ndash; 2 and not found in H. Do the same thing from i to its right. Keep track of current max length. Return max length at the end.
``` java Longest Consecutive Sequence <a href="http://oj.leetcode.com/problems/longest-consecutive-sequence/">http://oj.leetcode.com/problems/longest-consecutive-sequence/</a> Leetcode Link
/<em>*
 *
 * Given an unsorted array of integers,
 * find the length of the longest consecutive elements sequence.
 *
 * For example,
 * Given [100, 4, 200, 1, 3, 2],
 * The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.
 * Your algorithm should run in O(n) complexity.
 *
 * Created by lightsaber on 3/27/14.
 </em>/
public class LongestConsecutiveSequence
{</p>

<pre><code>public int longestConsecutive(int[] num)
{
    Set&lt;Integer&gt; numbers = new HashSet&lt;Integer&gt;();
    for(int i : num)
    {
        numbers.add(i);
    }

    int longest = 0;
    for(int i : num)
    {
        if(numbers.contains(i))
        {
            int left = i, right = i;

            while(numbers.contains(left - 1))
            {
                numbers.remove(--left);
            }

            while(numbers.contains(right + 1))
            {
                numbers.remove(++right);
            }

            if(right - left + 1 &gt; longest)
            {
                longest = right - left + 1;
            }
        }
    }

    return longest;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
